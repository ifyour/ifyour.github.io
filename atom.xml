<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ifyour&#39;s Blog</title>
  <subtitle>Talk is cheap. Show me the code.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ifyour.github.io/"/>
  <updated>2016-12-29T04:36:02.000Z</updated>
  <id>http://ifyour.github.io/</id>
  
  <author>
    <name>Ifyour</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Node.JS 学习笔记 [02]</title>
    <link href="http://ifyour.github.io/2016/12/29/Node-JS-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-02/"/>
    <id>http://ifyour.github.io/2016/12/29/Node-JS-学习笔记-02/</id>
    <published>2016-12-29T00:27:02.000Z</published>
    <updated>2016-12-29T04:36:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>在使用 npm 的时候，我发现在速度实在太慢，安装小一点的包确实没啥问题，装大一点的，依赖多一点的包的时候，问题就来了。速度慢，响应迟钝。<strong><em>nrm</em></strong> 是一个非常好的解决方案，安装 nrm 后，可以使用简单的命令快速来切换 npm 源，比如切换到 cnpm、taobao 源等，详细的使用方法可以点<a href="https://github.com/Pana/nrm#install" target="_blank" rel="external">这里</a>进去了解下。<br><a id="more"></a></p>
<h3 id="Node-js-使用"><a href="#Node-js-使用" class="headerlink" title="Node.js 使用"></a>Node.js 使用</h3><h4 id="Node-js-控制台"><a href="#Node-js-控制台" class="headerlink" title="Node.js 控制台"></a>Node.js 控制台</h4><p>前面说了，Node.js 提供了 REPL 模式来解析输入的每条命令，现在可以实战一下了，打开终端，然后输入 <code>node</code> 进入 Node.js 开始敲命令吧！<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">'hello,world!'</span>); <span class="comment">// 普通输入</span></div><div class="line"><span class="built_in">console</span>.error(<span class="string">'错误消息'</span>);    <span class="comment">// 错误输出</span></div><div class="line"><span class="built_in">console</span>.time(<span class="string">'time'</span>);        <span class="comment">// 会计算在这个表达式之间的代码快执行耗时</span></div><div class="line"><span class="comment">// &#123;...&#125;</span></div><div class="line"><span class="built_in">console</span>.time(<span class="string">'time'</span>);</div><div class="line"><span class="built_in">console</span>.assert(<span class="number">3</span>&gt;<span class="number">10</span>,<span class="string">'str..'</span>);<span class="comment">// 断言：表达式不成立，会输出后面的字符串</span></div></pre></td></tr></table></figure></p>
<h4 id="Node-js-作用域"><a href="#Node-js-作用域" class="headerlink" title="Node.js 作用域"></a>Node.js 作用域</h4><ul>
<li>全局作用域：没有使用 <code>var</code> 隐式声明的一个变量，会享受全局作用域，或者在 <code>global</code> 上挂载的变量，也具有全局作用域的属性，全局变量可以被其它模块使用。</li>
<li>局部作用域：在 Node.js 中一个文件就是一个模块，在这个模块中定义的变量，只能在这个模块中使用。</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 这些变量都属于全局变量</span></div><div class="line">name = <span class="string">'ifyour'</span>;</div><div class="line">global.age = <span class="number">18</span>; <span class="comment">// Node.js 中的 global 类似 JavaScript 中的 window</span></div></pre></td></tr></table></figure>
<div class="tip"><br>尽量避免使用全局变量，会造成变量污染。<br></div>

<h4 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h4><p>Node.js 中大量使用了回调函数，关于回调函数，我之前在简书写了一篇，我的理解心得，有兴趣的可以<a href="http://www.jianshu.com/p/1383f4cb9a75" target="_blank" rel="external">去看看</a>。关于回调函数，我也正是在 Node.js 中对它的理解更为深刻了，Node.js 大量的异步代码都借助回调函数实现，正因如此，性能更高呀。看一个非常简单的例子。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 定义回调函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">cb</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Hello,callback!'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 把回调函数的引用（指针）传入该函数，一秒后执行</span></div><div class="line">setTimeout(cb,<span class="number">1000</span>);</div></pre></td></tr></table></figure>
<p>借助这个例子，可以看到回调函数的实现机制：</p>
<ul>
<li>定义一个普通函数（其实它就是回调函数）</li>
<li>将该函数的引用地址作为参数传给调用者，调用者本身也是一个函数，例子中的 <code>setTimeout</code></li>
<li>当特定条件发生时，调用者使用这个引用地址去执行该函数</li>
</ul>
<p>回调函数的用途很多，比如实现事件注册、异步代码等。在 jQuery 中的动画就是回调函数的经典用法，<code>animate(x,y,z,function(){...})</code>,当一个动画执行完成后，执行回调函数。当点击一个按钮时，需要执行的函数块，这些都是回调函数。</p>
<h3 id="Node-js-事件"><a href="#Node-js-事件" class="headerlink" title="Node.js 事件"></a>Node.js 事件</h3><p>Node.js 中的 event 模块就是提供事件编程的 API，所有具有触发事件的对象都继承或内部包含了 <code>EventEmitter</code> 对象。来一个简单的例子吧！<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//events 模块中的 EventEmitter 对象，定义了事件对象的基础信息和行为</span></div><div class="line"><span class="keyword">var</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>).EventEmitter;</div><div class="line"><span class="keyword">var</span> event = <span class="keyword">new</span> EventEmitter();<span class="comment">// 实例化一个 event 对象</span></div><div class="line">event.on(<span class="string">'myevent'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123; <span class="comment">// 绑定 myevent 事件</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Hi!'</span> + name);</div><div class="line">&#125;);</div><div class="line">event.emit(<span class="string">'myevent'</span>,<span class="string">'ifyour'</span>);<span class="comment">// 触发事件</span></div></pre></td></tr></table></figure></p>
<h4 id="事件常用方法"><a href="#事件常用方法" class="headerlink" title="事件常用方法"></a>事件常用方法</h4><table>
<thead>
<tr>
<th style="text-align:left">方法</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">addListener(event, listener)</td>
<td style="text-align:left">为指定事件添加一个监听器到监听器数组的尾部。与on等价</td>
</tr>
<tr>
<td style="text-align:left">on(event, listener)</td>
<td style="text-align:left">为指定事件注册一个监听器，接受一个字符串 event 和一个回调函数</td>
</tr>
<tr>
<td style="text-align:left">once(event, listener)</td>
<td style="text-align:left">为指定事件注册一个单次监听器</td>
</tr>
<tr>
<td style="text-align:left">removeListener(event,listener)</td>
<td style="text-align:left">移除指定事件的某个监听器，监听器必须是该事件已经注册过的监听器</td>
</tr>
<tr>
<td style="text-align:left">removeAllListeners([event])</td>
<td style="text-align:left">移除所有事件的所有监听器如果指定事件，则移除该事件的所有监听器</td>
</tr>
<tr>
<td style="text-align:left">setMaxListeners(n)</td>
<td style="text-align:left">setMaxListeners 函数用于提高监听器的默认限制的数量，默认是 10</td>
</tr>
<tr>
<td style="text-align:left">listeners(event)</td>
<td style="text-align:left">返回指定事件的监听器数组</td>
</tr>
<tr>
<td style="text-align:left">emit(event, [arg1], [arg2], […])</td>
<td style="text-align:left">按顺序执行监听器，如果事件有注册监听返回 true，否则返回 false</td>
</tr>
</tbody>
</table>
<h3 id="Node-js-异步与同步"><a href="#Node-js-异步与同步" class="headerlink" title="Node.js 异步与同步"></a>Node.js 异步与同步</h3><p><img src="http://ww4.sinaimg.cn/large/6057861cgw1fb7gi7gen5j208c05qt8v.jpg" alt=""><br><strong><em>同步</em></strong>：一个任务执行完成后，才能执行下一个任务，执行总时间等于所有任务消耗时间之和。<br><strong><em>异步</em></strong>：几个任务同时执行，不限制先后，执行总时间等于执行耗时最长的那个任务的消耗时间。</p>
<p>在 Node.js 中每一个任务有一个或多个回调函数，前一个任务结束后，不是执行后一个任务，而是执行回调函数，后一个任务则是不等前一个任务结束就执行，所以程序的执行顺序与任务的排列顺序是不一致的、异步的。</p>
<h4 id="异步的实现"><a href="#异步的实现" class="headerlink" title="异步的实现"></a>异步的实现</h4><ul>
<li>回调函数</li>
<li>事件（基于回调函数）</li>
<li>Promise （ES6）</li>
</ul>
<p>前面已经讲了回调函数的实现方式，下面举两个例子来说明 Node.js 中 <strong><em>事件</em></strong> 和 <strong><em>Promise</em></strong> 实现异步。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 事件（基于回调函数）实现异步</span></div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> stream = fs.createReadStream(<span class="string">'./data'</span>);<span class="comment">// 调用 fs 模块创建一个读取流对象</span></div><div class="line">stream.on(<span class="string">'data'</span>,getData);<span class="comment">// 读取事件，每次读取时触发调用回调函数 getData</span></div><div class="line">stream.on(<span class="string">'end'</span>,getDataDone);<span class="comment">// 读取完毕调用回调函数 getDataDone</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDataDone</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'read done!'</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(data.toString());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面的代码中，当读取多个 <code>data</code> 文件时，输出的内容的顺序可能不一致，因为事件采用回调函数实现了异步操作。可以看出，事件实现异步，本质上还是回调函数。</p>
<blockquote>
<p>所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。</p>
</blockquote>
<p>下面来看看 <code>Promise</code> 的一个实例：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;<span class="comment">// 使用 Promise 生成实例</span></div><div class="line">    fs.readFile(<span class="string">'./1'</span>, <span class="string">'utf-8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;<span class="comment">// readFile 是一个异步方法</span></div><div class="line">        <span class="keyword">if</span> (!err) &#123;</div><div class="line">            resolve(data);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            reject(err);</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;);</div><div class="line"></div><div class="line">p.then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;<span class="comment">// 调用实例的 then 方法</span></div><div class="line">    <span class="built_in">console</span>.log(data);</div><div class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(err);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>ES6 规定，Promise 对象是一个构造函数，用来生成 Promise 实例。Promise 构造函数接受一个函数作为参数，该函数的两个参数分别是 <code>resolve</code> 和 <code>reject</code>。它们是两个函数，由 JavaScript 引擎提供，不用自己部署。</p>
<ul>
<li>resolve : 在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；</li>
<li>reject  : 在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。</li>
</ul>
<p>Promise实例生成以后，可以用 <code>then</code> 方法分别指定 Resolved 状态和 Reject 状态的回调函数。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">  <span class="comment">// success</span></div><div class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</div><div class="line">  <span class="comment">// failure</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>有了 Promise 对象，就可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise 对象提供统一的接口，使得控制异步操作更加容易。</p>
<p>下面这个例子，在未使用 <code>Promise</code> 时，我们想要 <code>p1</code> 读取完数据后，紧接着 <code>p2</code> 、<code>p3</code> 读取，就需要在 <code>p1</code> 的回调读取成功函数里继续写 <code>p2</code> 的读取，类似的 <code>p3</code> 也要在 <code>p2</code> 的回调函数中写，这就造成了 <strong><em>层层嵌套</em></strong> 不利于代码阅读。而使用 <code>Promise</code> 后，<code>then</code> 方法把里面的回调函数统一提取出来， 可读性更好了，也方便理解。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Promise 提供的 then 方法避免层次嵌套，相当于实现 then 的链式操作</span></div><div class="line"><span class="comment">// p1 执行完 then 方法后，通过 return p2 ，让 p2 继续执行 then 方法</span></div><div class="line">p1.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(data);</div><div class="line">    <span class="keyword">return</span> p2;</div><div class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(err);</div><div class="line">    <span class="keyword">return</span> p2;</div><div class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(data);</div><div class="line">    <span class="keyword">return</span> p3;</div><div class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(err);</div><div class="line">    <span class="keyword">return</span> p3;</div><div class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(data);</div><div class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(err);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>更多 Promise 语法，可以参考阮一峰的《<a href="http://es6.ruanyifeng.com/#docs/promise#基本用法" target="_blank" rel="external">ECMAScript 6 入门</a>》。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用 npm 的时候，我发现在速度实在太慢，安装小一点的包确实没啥问题，装大一点的，依赖多一点的包的时候，问题就来了。速度慢，响应迟钝。&lt;strong&gt;&lt;em&gt;nrm&lt;/em&gt;&lt;/strong&gt; 是一个非常好的解决方案，安装 nrm 后，可以使用简单的命令快速来切换 npm 源，比如切换到 cnpm、taobao 源等，详细的使用方法可以点&lt;a href=&quot;https://github.com/Pana/nrm#install&quot;&gt;这里&lt;/a&gt;进去了解下。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Node.JS 学习笔记 [01]</title>
    <link href="http://ifyour.github.io/2016/12/28/node-js-note-01/"/>
    <id>http://ifyour.github.io/2016/12/28/node-js-note-01/</id>
    <published>2016-12-28T11:00:24.000Z</published>
    <updated>2016-12-28T14:48:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>整理记录 Node.js 学习笔记，作为前端人员，非常有必要了解后端的一些知识，方便与后端的同事协作，提高效率，搞好前端后，也可以尝试往后端发展，成为一名全栈工程师！:P<br><a id="more"></a><br><img src="http://ww4.sinaimg.cn/mw690/6057861cgw1fb6vlzd7i7j20go08cjro.jpg" alt=""></p>
<h3 id="Node-js-介绍"><a href="#Node-js-介绍" class="headerlink" title="Node.js 介绍"></a>Node.js 介绍</h3><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。Node.js 的包管理器 npm，是全球最大的开源库生态系统。</p>
<h4 id="Node-js-和-JavaScript-的区别"><a href="#Node-js-和-JavaScript-的区别" class="headerlink" title="Node.js 和 JavaScript 的区别"></a>Node.js 和 JavaScript 的区别</h4><ul>
<li>Node.js 是一个可以运行 JavaScript 的平台，基于 ChromeV8 引擎，是对 JavaScript 的增强，使 JavaScript 具备了服务器语言的开发能力，比如操作文件、读取系统信息、网络传输等。</li>
<li>JavaScript 是一门编程语言，只要有 JavaScript 引擎就能运行并且如果JavaScript运行在浏览器中，浏览器对JavaScript加入了浏览器和文档操作的接口（方法）。</li>
</ul>
<div class="tip"><br>简单理解：浏览器中 JavaScript 主要是操作 BOM 和 DOM，而 Node.js 则是具有服务端语言处理能力（处理网络请求，保存数据到数据库等）。<br></div>

<h4 id="官方网站"><a href="#官方网站" class="headerlink" title="官方网站"></a>官方网站</h4><ul>
<li>英文社区： <a href="https://www.npmjs.com/" target="_blank" rel="external">https://www.npmjs.com/</a></li>
<li>中文社区：<a href="http://cnodejs.org/" target="_blank" rel="external">http://cnodejs.org/</a></li>
</ul>
<h4 id="Node-js-安装及运行"><a href="#Node-js-安装及运行" class="headerlink" title="Node.js 安装及运行"></a>Node.js 安装及运行</h4><p>在 Node.js 的官方提供的<a href="https://nodejs.org/en/download/" target="_blank" rel="external">下载频道</a>选择对应的平台及安装程序安装即可。Node.js 提供了 <code>REPL（Read-Evaluate-Print-Loop）</code> 模式，即 <strong><em>交互式命令行解析器</em></strong>，可以直接输入命令行，编写 Node.js 代码。安装成功后，我们可以在终端里输入 <code>node -v</code> 获取当前的 Node.js 版本号，能获取表示成功安装。</p>
<h3 id="Node-js-模块"><a href="#Node-js-模块" class="headerlink" title="Node.js 模块"></a>Node.js 模块</h3><p>模块对于 Node.js 来说是一个非常重要的概念，一个特定功能的文件就是一个模块。模块之间可能会存在一定的依赖关系，比如我写了一个 jQuery 轮播的插件，它就依赖 jQuery 库，在 Node.js 中可以非常方便的表示清楚这种依赖关系。说到模块，还需要说一个就是编写模块的规范。</p>
<h4 id="模块规范"><a href="#模块规范" class="headerlink" title="模块规范"></a>模块规范</h4><ul>
<li><strong><em>AMD</em></strong> (Asynchronous Module Definition)，这种规范是异步的加载模块，RequireR.js 应用了这一规范,适合客户端浏览器环境。</li>
<li><strong><em>CMD</em></strong> (Common Module Definition), 是 Sea.js 推崇的规范。</li>
<li><strong><em>CommonJS</em></strong> , 是诞生比较早的。Node.js 就采用了 CommonJS 的规范来定义模块。但是 CommonJs 采用的是同步加载文件方式，只适用于服务端（Node.js平台）。</li>
</ul>
<h4 id="使用模块"><a href="#使用模块" class="headerlink" title="使用模块"></a>使用模块</h4><p>模块定义完成后，就可以使用模块，通过命令行参数传递给 Node.js 以启动程序的模块被称为 <strong><em>主模块</em></strong>。主模块负责调度组成整个程序的其它模块完成工作。其实就类似网站中的 <code>index.html</code>，Node.js 中的主模块通常是 <code>main.js</code> 或者 <code>index.js</code>。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);<span class="comment">// 通过 require 引入 http 模块</span></div></pre></td></tr></table></figure></p>
<h4 id="模块组成"><a href="#模块组成" class="headerlink" title="模块组成"></a>模块组成</h4><p>在上条命令中，我们通过 require 引入了一个 http 模块，实际上作为一个单独的模块文件，Node.js 为我们在外层嵌套了一个函数，正因为有了这个函数，在这个文件中声明的变量就是私有变量啦，那么每个模块之间就不会产生干扰了。那么来看看这个函数长什么样子。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">exports, require, module, __filename, __dirname</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);<span class="comment">// 通过 require 引入 http 模块</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最外层，Node.js 为我们的代码包裹了这样一个函数，这个函数传入了几个参数，我来解释一下：</p>
<ul>
<li>exports ：用于在当前模块中加载和使用别的模块，传入一个模块名，返回一个模块导出对象。</li>
<li>require：当前模块的导出对象，用于导出模块公有方法和属性。</li>
<li>module：访问到当前模块的一些相关信息，但最多的用途是替换当前模块的导出对象。</li>
<li>__filename：当前模块的文件名</li>
<li>__dirname：当前模块的目录名</li>
</ul>
<h4 id="模块分类"><a href="#模块分类" class="headerlink" title="模块分类"></a>模块分类</h4><p>Node.js 提供两种模块类型：</p>
<ol>
<li>核心模块：是由 Node.js 平台提供的模块，也可以称为“系统模块”。</li>
<li>文件模块：以 <code>..</code> 或 <code>.</code> 和 <code>/</code> 开始的标识符，这里都被当做文件模块来处理。</li>
</ol>
<h4 id="node-modules-文件夹"><a href="#node-modules-文件夹" class="headerlink" title="node_modules 文件夹"></a>node_modules 文件夹</h4><p>该文件夹是 Node.js 中的特殊文件夹，用来存放 node 模块，如果一个模块既不是系统模块，也不是文件模块，那么它会被存放在 node_modules 文件夹中。使用 <code>console.log(module.paths);</code> 可以打印 node_modules 会查找的目录。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[ <span class="string">'/Users/wangmingming/Documents/Projects/JSstudy/12.26/node_modules'</span>,</div><div class="line">  <span class="string">'/Users/wangmingming/Documents/Projects/JSstudy/node_modules'</span>,</div><div class="line">  <span class="string">'/Users/wangmingming/Documents/Projects/node_modules'</span>,</div><div class="line">  <span class="string">'/Users/wangmingming/Documents/node_modules'</span>,</div><div class="line">  <span class="string">'/Users/wangmingming/node_modules'</span>,</div><div class="line">  <span class="string">'/Users/node_modules'</span>,</div><div class="line">  <span class="string">'/node_modules'</span> ]</div></pre></td></tr></table></figure></p>
<div class="tip"><br>在调用一个模块时，Node.js 沿路径向上逐级递归，直到根目录下的 node_modules 目录。CommonJS 模规范也允许在标识符中不包含文件扩展名，这种情况下，Node 会按 js、json、node 的次序补足扩展名，依次尝试。<br></div>

<h3 id="包-Package"><a href="#包-Package" class="headerlink" title="包 (Package)"></a>包 (Package)</h3><p>把由多个子模块组成的大模块称做包，并把所有子模块放在同一个目录里。在一个包中，会用 <code>package.json</code> 文件中的 <code>main</code> 属性用来描述这个包的主文件。</p>
<h4 id="NPM-Node-Package-Manager"><a href="#NPM-Node-Package-Manager" class="headerlink" title="NPM (Node Package Manager)"></a>NPM (Node Package Manager)</h4><p>大名鼎鼎的 NPM 实际上就是用来管理包的一个工具，借助 NPM 我们可以快速的安装和管理依赖包。下面是我整理的 npm 常用命令。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">npm init                   <span class="comment">#  初始化包，要求填入包名等信息</span></div><div class="line">npm install &lt;name&gt;         <span class="comment">#  本地安装一个包</span></div><div class="line">npm install &lt;name&gt; -g      <span class="comment">#  全局安装一个包</span></div><div class="line">npm install &lt;name&gt; --save  <span class="comment">#  本地安装并写入 package.json 依赖中</span></div><div class="line">npm remove &lt;name&gt;          <span class="comment">#  移除</span></div><div class="line">npm update &lt;name&gt;          <span class="comment">#  更新</span></div></pre></td></tr></table></figure></p>
<ul>
<li>本地安装：将安装包放在 <code>./node_modules</code> 下（运行 npm 命令时所在的目录），如果没有 node_modules 目录，会在当前执行 npm 命令的目录下生成 node_modules 目录。可以通过 <code>require()</code> 来引入本地安装的包。</li>
<li>全局安装：将安装包放在 <code>/usr/local</code> 下或者你 node 的安装目录，可以直接在命令行里使用。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;整理记录 Node.js 学习笔记，作为前端人员，非常有必要了解后端的一些知识，方便与后端的同事协作，提高效率，搞好前端后，也可以尝试往后端发展，成为一名全栈工程师！:P&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
